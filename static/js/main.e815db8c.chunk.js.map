{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["CardList","props","className","profiles","map","profile","key","id","Card","this","src","avatar_url","alt","name","company","location","href","html_url","public_repos","created_at","slice","React","Component","Form","state","userName","handleSubmit","event","a","preventDefault","axios","get","resp","onSubmit","data","console","log","setState","type","value","onChange","target","placeholder","required","App","addNewProfile","profileData","prevState","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAIMA,EAAW,SAAAC,GAAK,OACpB,yBAAKC,UAAU,oBACZD,EAAME,SAASC,KAAI,SAAAC,GAAO,OACzB,kBAAC,EAAD,eAAMC,IAAKD,EAAQE,IAAQF,SAK3BG,E,iLAEF,IAAMH,EAAUI,KAAKR,MACrB,OACE,yBAAKC,UAAU,kBACb,yBAAKQ,IAAKL,EAAQM,WAAYC,IAAI,QAClC,yBAAKV,UAAU,QACb,yBAAKA,UAAU,QAAQG,EAAQQ,MAC/B,yBAAKX,UAAU,WACZG,EAAQS,QADX,IACqBT,EAAQU,UAE7B,uBAAGC,KAAMX,EAAQY,UAAjB,kBACA,6BAAM,wBAA0BZ,EAAQa,cACxC,6BAAM,UAAYb,EAAQc,WAAWC,MAAM,EAAG,W,GAbrCC,IAAMC,WAoBnBC,E,2MACJC,MAAQ,CAAEC,SAAU,Y,EACpBC,a,uCAAe,WAAMC,GAAN,eAAAC,EAAA,6DACbD,EAAME,iBADO,SAEMC,IAAMC,IAAN,uCACe,EAAKP,MAAMC,WAHhC,OAEPO,EAFO,OAKb,EAAK/B,MAAMgC,SAASD,EAAKE,MACzBC,QAAQC,IAAIJ,EAAKE,MACjB,EAAKG,SAAS,CAAEZ,SAAU,KAPb,2C,8HASL,IAAD,OACP,OACE,0BAAMvB,UAAU,MAAM+B,SAAUxB,KAAKiB,cACnC,2BACEY,KAAK,OACLC,MAAO9B,KAAKe,MAAMC,SAClBe,SAAU,SAAAb,GAAK,OAAI,EAAKU,SAAS,CAAEZ,SAAUE,EAAMc,OAAOF,SAC1DG,YAAY,kBACZC,UAAQ,IAEV,4BAAQzC,UAAU,mBAAlB,kB,GArBWmB,IAAMC,WA2BJsB,E,2MACnBpB,MAAQ,CACNrB,SAAU,I,EAEZ0C,cAAgB,SAAAC,GACd,EAAKT,UAAS,SAAAU,GAAS,MAAK,CAC1B5C,SAAS,GAAD,mBAAM4C,EAAU5C,UAAhB,CAA0B2C,S,wEAIpC,OACE,6BACE,yBAAK5C,UAAU,cAAf,mBACkB,6BAChB,+BACE,0CAIJ,kBAAC,EAAD,CAAM+B,SAAUxB,KAAKoC,gBACrB,kBAAC,EAAD,CAAU1C,SAAUM,KAAKe,MAAMrB,gB,GApBNkB,IAAMC,WC/CnB0B,QACW,cAA7BC,OAAOlC,SAASmC,UAEe,UAA7BD,OAAOlC,SAASmC,UAEhBD,OAAOlC,SAASmC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e815db8c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\n\nconst CardList = props => (\n  <div className=\"d-flex flex-wrap\">\n    {props.profiles.map(profile => (\n      <Card key={profile.id} {...profile} />\n    ))}\n  </div>\n);\n\nclass Card extends React.Component {\n  render() {\n    const profile = this.props;\n    return (\n      <div className=\"github-profile\">\n        <img src={profile.avatar_url} alt=\"img\" />\n        <div className=\"info\">\n          <div className=\"name\">{profile.name}</div>\n          <div className=\"company\">\n            {profile.company} {profile.location}\n          </div>\n          <a href={profile.html_url}>Github profile</a>\n          <div>{\"Public repositories: \" + profile.public_repos}</div>\n          <div>{\"Since: \" + profile.created_at.slice(0, 10)}</div>\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Form extends React.Component {\n  state = { userName: \"saood011\" };\n  handleSubmit = async event => {\n    event.preventDefault();\n    const resp = await axios.get(\n      `https://api.github.com/users/${this.state.userName}`\n    );\n    this.props.onSubmit(resp.data);\n    console.log(resp.data);\n    this.setState({ userName: \"\" });\n  };\n  render() {\n    return (\n      <form className=\"p-2\" onSubmit={this.handleSubmit}>\n        <input\n          type=\"text\"\n          value={this.state.userName}\n          onChange={event => this.setState({ userName: event.target.value })}\n          placeholder=\"GitHub username\"\n          required\n        />\n        <button className=\"btn btn-success\">Get info!</button>\n      </form>\n    );\n  }\n}\n\nexport default class App extends React.Component {\n  state = {\n    profiles: []\n  };\n  addNewProfile = profileData => {\n    this.setState(prevState => ({\n      profiles: [...prevState.profiles, profileData]\n    }));\n  };\n  render() {\n    return (\n      <div>\n        <div className=\"p-2 header\">\n          GitHub Info App <br />\n          <small>\n            <em>by Saood</em>\n          </small>\n        </div>\n\n        <Form onSubmit={this.addNewProfile} />\n        <CardList profiles={this.state.profiles} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}